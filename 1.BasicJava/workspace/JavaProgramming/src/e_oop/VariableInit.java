package e_oop;

public class VariableInit {

	/*
	 * 명시적 초기화 / 초기화블럭 / 생성자
	 * 명시적 초기화 : 변수를 만들면서 초기화 까지 하는 것
	 * 초기화 블럭 : 여러 줄의 코드로 초기화 하기 위해 사용 
	 */
	
	int var = 10;
	static int classVar = 20;
	
	//초기화 블럭
	{
		var = 30;
	}//인스턴스 변수의 초기화블럭
	static{
		classVar = 40;
	}//클래스 변수의 초기화블럭
	
	/*
	 * 생성자
	 * - 클래스와 같은 이름의 메서드
	 * - 인스턴스 변수를 초기화 하기 위해 사용한다.
	 * - 클래스에 생성자는 반드시 하나 이상 존재해야 한다.
	 * - 직접 선언해주지 않으면 컴파일러가 기본 생성자를 만들어준다.		: 사용자가 정의한 생성자가 존재하면 컴파일러는 기본 생성자를 만들어주지 않는다.
	 * - 생성자는 리턴타입이 없다.
	 */
	
	VariableInit(){
		var = 50;
		
		//생성자 사용 이유
		//초기화에 여러 줄의 코드가 필요할 때
		//초기화에 파라미터가 필요할 때 : 초기화 값을 외부에서 받아서 결정할 때
		//생성자는 항상 new와 같이 사용된다.
	}
	
	public static void main(String[] args) {
		Init i = new Init();
		i.a = 10;
		i.b = 20;
		i.c = 30;
		
		Init i2 = new Init();
		i2.a = 40;
		i2.b = 50;
		i2.c = 60;
		
		Init i3 = new Init(70,80,90);
		//new는 메모리에 객체가 저장될 공간을 만들어주고 그 주소를 리턴해준다.
		
	}
}

class Init{
	int a;
	int b;
	int c;
	
	Init(int a, int b, int c){
//		this();
//		this(1,2,3);
		this.a = a;
		this.b = b;
		this.c = c;
		//this : 인스턴수 변수와 지역변수의 이름이 같을 때 둘을 구분하기 위해 사용한다.
		//this : 자기 객체의 주소를 가리키고 있는 변수
	    //전역변수와 지역변수를 사용할 때는 스코프가 작은 변수부터 사용한다 : local variable인 parameter로 받은 a를 의미한다.
	}
	Init(){
//		a = 10;
//		b = 20;
//		c = 30;
		//생성자가 오버로딩 되어있을 때 인스턴스 변수를 직접 설정하는 것은 권장되지 않는다.
		//다른 생성자를 이용하여 초기화 하는 것이 권장된다.
		//this()메서드를 이용한다 : 생성자 안에서 다른 생성자를 호출할 때 사용
		//this()메서드는 반드시 블럭에서 가장 처음 실행되어야 한다.
		//this()는 재귀호출이 불가능하다.
		//this()는 서로 참조할 수도 없다
		this(10,20,30);
	}//오버로딩 : 같은 이름을 가진 메서드를 여러개 정의하는 것
	//오버로딩된 메서드의 구분은 파라미터로 한다.
}
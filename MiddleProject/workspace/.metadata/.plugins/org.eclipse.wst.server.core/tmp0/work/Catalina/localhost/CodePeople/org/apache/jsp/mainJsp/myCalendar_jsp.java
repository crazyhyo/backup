/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/8.5.37
 * Generated at: 2021-10-26 23:54:57 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.mainJsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import kr.or.ddit.schedule.vo.ScheduleVO;
import kr.or.ddit.cmm.vo.JobOpeningPagingVO;
import java.util.Map;
import java.util.List;
import kr.or.ddit.company.service.CompanyServiceImpl;
import kr.or.ddit.company.service.ICompanyService;
import kr.or.ddit.company.vo.CompanyVO;
import kr.or.ddit.member.vo.MemberVO;
import kr.or.ddit.cmm.util.SessionCheck;

public final class myCalendar_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("kr.or.ddit.member.vo.MemberVO");
    _jspx_imports_classes.add("kr.or.ddit.cmm.util.SessionCheck");
    _jspx_imports_classes.add("kr.or.ddit.company.service.ICompanyService");
    _jspx_imports_classes.add("kr.or.ddit.company.vo.CompanyVO");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("kr.or.ddit.cmm.vo.JobOpeningPagingVO");
    _jspx_imports_classes.add("kr.or.ddit.schedule.vo.ScheduleVO");
    _jspx_imports_classes.add("kr.or.ddit.company.service.CompanyServiceImpl");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    final java.lang.String _jspx_method = request.getMethod();
    if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method) && !javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET POST or HEAD");
      return;
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");

	int memCode = 0;
	int memNo = 0;
	int hrNo = 0;
	int cnt = 0;
	int comNo = 0;
	MemberVO loginMember = null;
	CompanyVO cv = null;
	if(SessionCheck.isLoginMember(session)){
		
		loginMember = (MemberVO)session.getAttribute("memVO");
		// 로그인 상태인 경우
		memCode = SessionCheck.getMemCode(session, request);
		memNo = SessionCheck.getMemNo(session, request);
		System.out.println(memNo);
		if(memCode == 1){
			System.out.println(memCode);
			// 개인회원인 경우
			hrNo = SessionCheck.getHrNo(session, request);
		}else if(memCode == 2){
			System.out.println(memCode);
			// 기업회원인 경우
			cnt = SessionCheck.hasComNo(session, request);
			if(cnt > 0){
				// 기업을 등록한 기업회원인 경우
				
				System.out.println(cnt);
				comNo = SessionCheck.getComNo(session, request);
				ICompanyService companyService = CompanyServiceImpl.getInstance();
				cv = companyService.getCompany(comNo);
			}
		}
	}else{
		// 비회원인 경우
	}
	
	System.out.println("memNo : " + memNo + "\nmemCode : " + memCode + "\nhrNo" + hrNo + "\ncnt : " + cnt + "\ncomNo : " + comNo);
	
	
	List<ScheduleVO> list = (List<ScheduleVO>) request.getAttribute("joScheduleList");
	

      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html lang='en'>\r\n");
      out.write("  <head>\r\n");
      out.write("    <meta charset='utf-8' />\r\n");
      out.write("    <link href='/CodePeople/css/myCalendar.css' rel='stylesheet' />\r\n");
      out.write("    <link href='/CodePeople/css/myCalendar.min.css' rel='stylesheet' />\r\n");
      out.write("    <script src='/CodePeople/js/myCalendarLocales-all.js'></script>\r\n");
      out.write("    <script src='/CodePeople/js/myCalendar.js'></script>\r\n");
      out.write("    <script src='/CodePeople/js/myCalendar.min.js'></script>\r\n");
      out.write("    <script>\r\n");
      out.write("\r\n");
      out.write("      document.addEventListener('DOMContentLoaded', function() {\r\n");
      out.write("        var calendarEl = document.getElementById('calendar');\r\n");
      out.write("        \r\n");
      out.write("        var calendar = new FullCalendar.Calendar(calendarEl, {\r\n");
      out.write("           headerToolbar: {\r\n");
      out.write("                left: 'prev,next today',\r\n");
      out.write("                center: 'title',\r\n");
      out.write("                right: 'dayGridMonth,timeGridWeek,timeGridDay'\r\n");
      out.write("              },   \r\n");
      out.write("          locale: 'ko',    \r\n");
      out.write("          editable: true,\r\n");
      out.write("          initialView: 'dayGridMonth',\r\n");
      out.write("          navLinks: true, // can click day/week names to navigate views\r\n");
      out.write("          selectable: true,\r\n");
      out.write("          selectMirror: true,\r\n");
      out.write("          select: function(arg) {\r\n");
      out.write("            var title = prompt('추가할 일정을 입력해주세요.');\r\n");
      out.write("            if (title) {\r\n");
      out.write("              calendar.addEvent({\r\n");
      out.write("                title: title,\r\n");
      out.write("                start: arg.start,\r\n");
      out.write("                end: arg.end,\r\n");
      out.write("                allDay: arg.allDay\r\n");
      out.write("              })\r\n");
      out.write("            }\r\n");
      out.write("            calendar.unselect()\r\n");
      out.write("          },\r\n");
      out.write("          eventClick: function(arg) {\r\n");
      out.write("            if (confirm('일정을 삭제하시겠습니까?')) {\r\n");
      out.write("              arg.event.remove()\r\n");
      out.write("            }\r\n");
      out.write("          },\r\n");
      out.write("          editable: true,\r\n");
      out.write("          dayMaxEvents: true, // allow \"more\" link when too many events\r\n");
      out.write("          events: [\r\n");
      out.write("        \t  ");
 for(int i = 0; i < list.size(); i++){
        		  ScheduleVO vo = list.get(i);
        		  if(i > 0)	{ out.print(","); } 
      out.write("\r\n");
      out.write("\t            {\r\n");
      out.write("\t            \t title : '");
      out.print( vo.getScheCont() );
      out.write("',\r\n");
      out.write("\t                 start : '");
      out.print( vo.getScheSdate() );
      out.write("',\r\n");
      out.write("\t                 end : '");
      out.print( vo.getScheEdate() );
      out.write("',\r\n");
      out.write("\t                 color : '");
      out.print( vo.getCalTagColor() );
      out.write("',\r\n");
      out.write("\t                 display : 'border',// 여기는 BORDER로 하드코딩하기 \r\n");
      out.write("\t                 allday : true\r\n");
      out.write("\t             }\r\n");
      out.write("          ");
 } 
      out.write("\r\n");
      out.write("          ]\r\n");
      out.write("        });\r\n");
      out.write("        calendar.render();\r\n");
      out.write("      });\r\n");
      out.write("     \r\n");
      out.write("    </script>\r\n");
      out.write("  \r\n");
      out.write("  </head>\r\n");
      out.write("  <body>\r\n");
      out.write("    <div id='calendar'></div>\r\n");
      out.write("  </body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
